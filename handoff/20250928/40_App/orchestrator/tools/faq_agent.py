import os
import json
from datetime import datetime
from .github_api import get_repo, create_branch, commit_file, open_pr, get_pr_checks
from redis import Redis
import uuid

class FAQAgent:
    def __init__(self):
        self.redis_url = os.getenv("REDIS_URL", "redis://localhost:6379/0")
        try:
            self.redis_client = Redis.from_url(self.redis_url)
        except Exception as e:
            print(f"[FAQ Agent] Redis connection failed: {e}")
            self.redis_client = None
            
    def generate_faq_content(self, topic="Morning AI Platform"):
        """Generate FAQ content based on topic"""
        faq_content = f"""# {topic} FAQ


A: Morning AI 是一個智能決策支援平台，提供 AI 驅動的業務洞察和自動化決策建議。

A: 您可以通過註冊帳戶、選擇適合的訂閱方案，然後配置您的業務參數來開始使用。

A: 平台支援多種 API 整合，包括 CRM 系統、資料庫連接和第三方分析工具。

A: 您可以通過 support@morningai.com 或平台內的客服系統聯繫我們的技術團隊。

A: Morning AI 採用企業級安全標準，包括數據加密、訪問控制和定期安全審計。

A: 我們支援信用卡、銀行轉帳和企業採購訂單等多種付款方式。

---
*最後更新: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}*
*由 Morning AI Agent 自動生成*
"""
        return faq_content

    def create_faq_pr(self, topic="Morning AI Platform"):
        """Create FAQ PR with full workflow"""
        trace_id = str(uuid.uuid4())[:8]
        
        try:
            repo = get_repo()
            if not repo:
                raise Exception("Failed to get repository")
            
            branch_name = f"agent/faq-update-{trace_id}"
            create_branch(repo, base="main", new_branch=branch_name)
            
            faq_content = self.generate_faq_content(topic)
            commit_file(
                repo, 
                branch_name, 
                "docs/FAQ.md", 
                faq_content, 
                f"feat: update FAQ content for {topic} (trace-id: {trace_id})"
            )
            
            pr_body = f"""# FAQ Update - {topic}

自動生成的 FAQ 更新，包含最新的平台資訊和常見問題解答。

- 更新 FAQ 內容
- 新增常見問題和解答
- 更新最後修改時間

**Trace ID**: `{trace_id}`
**Generated by**: Morning AI Agent
**Timestamp**: {datetime.now().isoformat()}

此 PR 由 Agent MVP 系統自動生成，遵循 FAQ → PR → CI → Merge 閉環流程。

- [ ] FAQ 內容準確且有用
- [ ] 格式符合文檔標準
- [ ] CI 檢查通過
- [ ] 無語法或拼寫錯誤
"""
            
            pr_url, pr_number = open_pr(
                repo, 
                branch_name, 
                f"feat: update FAQ content for {topic}", 
                pr_body
            )
            
            task_info = {
                "trace_id": trace_id,
                "pr_url": pr_url,
                "pr_number": pr_number,
                "branch": branch_name,
                "status": "created",
                "topic": topic,
                "created_at": datetime.now().isoformat()
            }
            
            if self.redis_client:
                try:
                    self.redis_client.setex(
                        f"faq_task:{trace_id}", 
                        3600,  # 1 hour TTL
                        json.dumps(task_info)
                    )
                except Exception as e:
                    print(f"[FAQ Agent] Redis storage failed: {e}")
            
            return {
                "success": True,
                "trace_id": trace_id,
                "pr_url": pr_url,
                "pr_number": pr_number,
                "message": f"FAQ PR created successfully (trace-id: {trace_id})"
            }
            
        except Exception as e:
            return {
                "success": False,
                "trace_id": trace_id,
                "error": str(e),
                "message": f"Failed to create FAQ PR: {e}"
            }

    def get_task_status(self, trace_id):
        """Get task status from Redis"""
        if not self.redis_client:
            return None
            
        try:
            task_data = self.redis_client.get(f"faq_task:{trace_id}")
            if task_data:
                return json.loads(task_data)
        except Exception as e:
            print(f"[FAQ Agent] Failed to get task status: {e}")
        
        return None

    def check_pr_status(self, trace_id):
        """Check PR CI status and update task"""
        task_info = self.get_task_status(trace_id)
        if not task_info:
            return {"error": "Task not found"}
            
        try:
            repo = get_repo()
            if not repo:
                return {"error": "Repository not available"}
                
            pr_number = task_info.get("pr_number")
            if not pr_number:
                return {"error": "PR number not found"}
                
            ci_state, ci_details = get_pr_checks(repo, pr_number)
            
            task_info["ci_state"] = ci_state
            task_info["ci_details"] = ci_details
            task_info["last_checked"] = datetime.now().isoformat()
            
            if self.redis_client:
                try:
                    self.redis_client.setex(
                        f"faq_task:{trace_id}",
                        3600,
                        json.dumps(task_info)
                    )
                except Exception as e:
                    print(f"[FAQ Agent] Failed to update task status: {e}")
            
            return {
                "success": True,
                "ci_state": ci_state,
                "ci_details": ci_details,
                "task_info": task_info
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
