import os, argparse, time, uuid, hashlib
from typing import Optional
from dotenv import load_dotenv
from tools.github_api import get_repo, create_branch, commit_file, open_pr, get_pr_checks
from redis_queue.worker import enqueue
from memory.pgvector_store import save_text, recall_top

def planner(goal:str):
    steps = ["analyze", "patch", "open PR", "check CI"]
    save_text("goal", goal)
    return steps

def execute(goal:str, repo_full: str, trace_id: Optional[str] = None):
    if trace_id is None:
        trace_id = str(uuid.uuid4())
    
    repo = get_repo()
    timestamp = int(time.time())
    branch = create_branch(repo, base="main", new_branch=f"orchestrator/{timestamp}-faq-update")
    
    faq_content = f"""# Frequently Asked Questions (FAQ)

MorningAI is a comprehensive platform for documentation collection and analysis, focused on JavaScript tooling ecosystems.

Please refer to our [README](../README.md) for installation and setup instructions.

- Frontend: React, Vite, TailwindCSS
- Backend: Python, Flask
- Orchestrator: LangGraph, Redis Queue, Supabase

See our [CONTRIBUTING](CONTRIBUTING.md) guide for details.

---
Generated by Orchestrator
Task: {goal}
Trace ID: {trace_id}
"""
    
    commit_file(repo, branch, "docs/FAQ.md", faq_content, f"docs: add FAQ.md (trace-id: {trace_id})")
    
    pr_body = f"""## Automated FAQ Update

**Task:** {goal}
**Trace ID:** `{trace_id}`
**Branch:** `{branch}`

This PR was automatically generated by the MorningAI Orchestrator.

[Link to Devin run](https://app.devin.ai/sessions/9142c8e8a3de4754a7ba8e8c06a751ed)
Requested by: @RC918
"""
    
    pr_url, pr_num = open_pr(repo, branch, f"docs: Update FAQ (trace-id: {trace_id[:8]})", body=pr_body)
    print(f"[PR] {pr_url} (trace-id: {trace_id})")
    
    try:
        import subprocess
        subprocess.run([
            "gh", "pr", "merge", str(pr_num),
            "--auto", "--squash",
            "--repo", repo_full
        ], check=False)
    except Exception as e:
        print(f"[GitHub] Could not enable auto-merge: {e}")
    
    state, checks = get_pr_checks(repo, pr_num)
    print(f"[CI] state={state} checks={checks}")
    
    return pr_url, state, trace_id

def main(goal:str, repo:str):
    trace_id = str(uuid.uuid4())
    print(f"[Trace] Starting task with trace-id: {trace_id}")
    
    steps = planner(goal)
    print("[Planner] steps:", steps)
    
    idempotency_key = hashlib.md5(goal.encode()).hexdigest()
    
    try:
        job_ids = enqueue(steps, idempotency_key=idempotency_key)
        print("[Queue] enqueued jobs:", job_ids)
    except Exception as e:
        print(f"[Queue] Redis unavailable, continuing in demo mode: {e}")
        job_ids = [f"demo-job-{i}" for i in range(len(steps))]
    
    try:
        pr_url, state, trace_id = execute(goal, repo, trace_id=trace_id)
        print("[Result]", pr_url, state, f"trace-id: {trace_id}")
    except Exception as e:
        print(f"[GitHub] API unavailable, continuing in demo mode: {e}")
        pr_url, state = "demo-pr-url", "demo"
    
    try:
        mem = recall_top("recent")
        print("[Memory] recent items:", len(mem))
    except Exception as e:
        print(f"[Memory] Supabase unavailable, continuing in demo mode: {e}")
        mem = []

if __name__ == "__main__":
    load_dotenv()
    ap = argparse.ArgumentParser()
    ap.add_argument("--goal", required=True)
    ap.add_argument("--repo", default=os.getenv("GITHUB_REPO","RC918/morningai"))
    args = ap.parse_args()
    main(args.goal, args.repo)
