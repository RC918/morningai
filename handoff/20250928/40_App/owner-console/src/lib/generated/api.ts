/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Morning AI API
 * Comprehensive AI Agent Ecosystem API
 * OpenAPI spec version: 1.0.0
 */
import { apiClient } from '../api-client';
export interface User {
  id?: string;
  name?: string;
  email?: string;
  avatar?: string;
  role?: string;
  tenant_id?: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  user?: User;
  token?: string;
  expires_in?: number;
}

export interface BillingPlan {
  id?: string;
  name?: string;
  price?: number;
  currency?: string;
  interval?: string;
  features?: string[];
}

export interface CheckoutSessionRequest {
  plan_id: string;
  success_url?: string;
  cancel_url?: string;
}

export interface CheckoutSessionResponse {
  session_id?: string;
  checkout_url?: string;
  expires_at?: string;
}

export type UserSettingsProfile = {
  name?: string;
  email?: string;
  avatar?: string;
  role?: string;
};

export type UserSettingsPreferencesNotifications = {
  email?: boolean;
  desktop?: boolean;
  aiSuggestions?: boolean;
};

export type UserSettingsPreferences = {
  language?: string;
  theme?: string;
  notifications?: UserSettingsPreferencesNotifications;
};

export interface UserSettings {
  profile?: UserSettingsProfile;
  preferences?: UserSettingsPreferences;
}

export type DashboardDataMetrics = { [key: string]: unknown };

export type DashboardDataChartsItem = { [key: string]: unknown };

export type DashboardDataAlertsItem = { [key: string]: unknown };

export interface DashboardData {
  metrics?: DashboardDataMetrics;
  charts?: DashboardDataChartsItem[];
  alerts?: DashboardDataAlertsItem[];
}

export type ErrorError = {
  code?: string;
  message?: string;
  request_id?: string;
};

export interface Error {
  error?: ErrorError;
}

export interface SuccessResponse {
  success?: boolean;
  message?: string;
  request_id?: string;
}

export type GetBillingPlans200 = {
  plans?: BillingPlan[];
};

/**
 * @summary Verify authentication token
 */
export type getAuthVerifyResponse200 = {
  data: User
  status: 200
}

export type getAuthVerifyResponse401 = {
  data: Error
  status: 401
}
    
export type getAuthVerifyResponseSuccess = (getAuthVerifyResponse200) & {
  headers: Headers;
};
export type getAuthVerifyResponseError = (getAuthVerifyResponse401) & {
  headers: Headers;
};

export type getAuthVerifyResponse = (getAuthVerifyResponseSuccess | getAuthVerifyResponseError)

export const getGetAuthVerifyUrl = () => {


  

  return `/auth/verify`
}

export const getAuthVerify = async ( options?: RequestInit): Promise<getAuthVerifyResponse> => {
  
  return apiClient<getAuthVerifyResponse>(getGetAuthVerifyUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary User login
 */
export type postAuthLoginResponse200 = {
  data: LoginResponse
  status: 200
}

export type postAuthLoginResponse401 = {
  data: Error
  status: 401
}
    
export type postAuthLoginResponseSuccess = (postAuthLoginResponse200) & {
  headers: Headers;
};
export type postAuthLoginResponseError = (postAuthLoginResponse401) & {
  headers: Headers;
};

export type postAuthLoginResponse = (postAuthLoginResponseSuccess | postAuthLoginResponseError)

export const getPostAuthLoginUrl = () => {


  

  return `/auth/login`
}

export const postAuthLogin = async (loginRequest: LoginRequest, options?: RequestInit): Promise<postAuthLoginResponse> => {
  
  return apiClient<postAuthLoginResponse>(getPostAuthLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginRequest,)
  }
);}



/**
 * @summary Get billing plans
 */
export type getBillingPlansResponse200 = {
  data: GetBillingPlans200
  status: 200
}
    
export type getBillingPlansResponseSuccess = (getBillingPlansResponse200) & {
  headers: Headers;
};
;

export type getBillingPlansResponse = (getBillingPlansResponseSuccess)

export const getGetBillingPlansUrl = () => {


  

  return `/billing/plans`
}

export const getBillingPlans = async ( options?: RequestInit): Promise<getBillingPlansResponse> => {
  
  return apiClient<getBillingPlansResponse>(getGetBillingPlansUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Create checkout session
 */
export type postBillingCheckoutSessionResponse201 = {
  data: CheckoutSessionResponse
  status: 201
}
    
export type postBillingCheckoutSessionResponseSuccess = (postBillingCheckoutSessionResponse201) & {
  headers: Headers;
};
;

export type postBillingCheckoutSessionResponse = (postBillingCheckoutSessionResponseSuccess)

export const getPostBillingCheckoutSessionUrl = () => {


  

  return `/billing/checkout/session`
}

export const postBillingCheckoutSession = async (checkoutSessionRequest: CheckoutSessionRequest, options?: RequestInit): Promise<postBillingCheckoutSessionResponse> => {
  
  return apiClient<postBillingCheckoutSessionResponse>(getPostBillingCheckoutSessionUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      checkoutSessionRequest,)
  }
);}



/**
 * @summary Get user settings
 */
export type getSettingsResponse200 = {
  data: UserSettings
  status: 200
}
    
export type getSettingsResponseSuccess = (getSettingsResponse200) & {
  headers: Headers;
};
;

export type getSettingsResponse = (getSettingsResponseSuccess)

export const getGetSettingsUrl = () => {


  

  return `/settings`
}

export const getSettings = async ( options?: RequestInit): Promise<getSettingsResponse> => {
  
  return apiClient<getSettingsResponse>(getGetSettingsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Save user settings
 */
export type postSettingsResponse200 = {
  data: SuccessResponse
  status: 200
}
    
export type postSettingsResponseSuccess = (postSettingsResponse200) & {
  headers: Headers;
};
;

export type postSettingsResponse = (postSettingsResponseSuccess)

export const getPostSettingsUrl = () => {


  

  return `/settings`
}

export const postSettings = async (userSettings: UserSettings, options?: RequestInit): Promise<postSettingsResponse> => {
  
  return apiClient<postSettingsResponse>(getPostSettingsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userSettings,)
  }
);}



/**
 * @summary Get dashboard data
 */
export type getDashboardDataResponse200 = {
  data: DashboardData
  status: 200
}
    
export type getDashboardDataResponseSuccess = (getDashboardDataResponse200) & {
  headers: Headers;
};
;

export type getDashboardDataResponse = (getDashboardDataResponseSuccess)

export const getGetDashboardDataUrl = () => {


  

  return `/dashboard/data`
}

export const getDashboardData = async ( options?: RequestInit): Promise<getDashboardDataResponse> => {
  
  return apiClient<getDashboardDataResponse>(getGetDashboardDataUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}
