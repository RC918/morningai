name: Post-Deploy Health Assertions
on:
  workflow_dispatch:
  push: { branches: [ main ] }
  schedule:
    - cron: "0 * * * *"
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check core health (/healthz)
        run: |
          set -e
          curl -sS https://morningai-backend-v2.onrender.com/healthz | tee /tmp/health.json
          jq -e '
            (.phase | test("Phase 8")) and
            ((.version // .app_version // .app_version_tag // .app_build // "") | test("^8\\.0\\.0$")) and
            ((.status // "") | test("healthy") or (.database // "") | test("connected"))
          ' /tmp/health.json >/dev/null

      - name: Test Phase 4–6 API endpoints (JWT optional, with retry)
        env:
          TEST_ADMIN_JWT: ${{ secrets.TEST_ADMIN_JWT }}
        run: |
          set -e
          BASE="https://morningai-backend-v2.onrender.com"

          curl_code(){  # $1: path, optional $2: "auth"
            local ep="$1" auth="$2" code=0
            for i in 1 2 3; do
              if [ "$auth" = "auth" ]; then
                code=$(curl -s -H "Authorization: Bearer $TEST_ADMIN_JWT" -o /dev/null -w "%{http_code}" "$BASE$ep")
              else
                code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE$ep")
              fi
              [ "$code" != "000" ] && break
              sleep 1
            done
            echo "$code"
          }

          echo "=== Phase 4 & 5 expect 200 ==="
          for EP in /api/governance/status /api/business-intelligence/summary; do
            code=$(curl_code "$EP")
            echo "$EP code=$code"
            test "$code" -eq 200 || { echo "::error::$EP expected 200, got $code"; exit 1; }
          done

          echo "=== Phase 6 protected endpoint ==="
          if [ -n "$TEST_ADMIN_JWT" ]; then
            code=$(curl_code "/api/security/reviews/pending" auth)
            echo "/api/security/reviews/pending (auth) code=$code"
            test "$code" -eq 200 || { echo "::error::with JWT expected 200, got $code"; exit 1; }
          else
            code=$(curl_code "/api/security/reviews/pending")
            echo "/api/security/reviews/pending code=$code"
            case "$code" in
              200|401|403) : ;;  # 視為保護正常生效
              *) echo "::error::expected 200/401/403 without JWT, got $code"; exit 1;;
            esac
          fi

      - name: SLA Baseline (success-rate & latency)
        run: |
          URL="https://morningai-backend-v2.onrender.com/health"; TOTAL=10; S=0; T=0
          for i in $(seq 1 $TOTAL); do
            o=$(curl -s -o /dev/null -w '%{http_code} %{time_total}\n' "$URL"); c=${o% *}; d=${o#* }
            [ "$c" -eq 200 ] && S=$((S+1))
            T=$(awk -v a=$T -v b=$d 'BEGIN{printf "%.6f", a+b}')
          done
          RATE=$((S*100/TOTAL)); AVG=$(awk -v T=$T -v N=$TOTAL 'BEGIN{printf "%.3f", T/N}')
          echo "rate=$RATE avg=${AVG}s"
          test "$RATE" -ge 90
