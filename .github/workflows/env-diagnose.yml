name: env-diagnose
on: { workflow_dispatch: {} }
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Redis client
        run: pip install redis
      - name: Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: 'curl -sS "$SUPABASE_URL/rest/v1/" -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" | head -n 1'
      - name: Redis (tcp)
        env:
          REDIS_URL: ${{ secrets.REDIS_URL }}
        run: |
          python - <<'PY'
          import os, sys, redis
          redis_url = os.environ.get('REDIS_URL', '')
          if not redis_url:
              print('⚠️  REDIS_URL not configured in GitHub secrets')
              print('ℹ️  To add: Settings → Secrets and variables → Actions → New repository secret')
              sys.exit(0)
          try:
              r = redis.from_url(redis_url)
              result = r.ping()
              print(f'✅ Redis PING: {result}')
          except Exception as e:
              print(f'❌ Redis connection failed: {e}')
              sys.exit(1)
          PY
      - name: Redis (rest)
        env:
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
        run: |
          if [ -z "$UPSTASH_REDIS_REST_URL" ] || [ -z "$UPSTASH_REDIS_REST_TOKEN" ]; then
            echo "⚠️  Upstash Redis REST credentials not configured"
            exit 0
          fi
          curl -sS "$UPSTASH_REDIS_REST_URL/ping" -H "Authorization: Bearer $UPSTASH_REDIS_REST_TOKEN" -H "Content-Type: application/json" | head -n 1
      - name: Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          if [ -z "$CLOUDFLARE_API_TOKEN" ] || [ -z "$CLOUDFLARE_ZONE_ID" ]; then
            echo "⚠️  Cloudflare credentials not configured"
            exit 0
          fi
          
          # Clean the token - remove whitespace, quotes, and "Bearer" prefix if present
          TOKEN=$(echo "$CLOUDFLARE_API_TOKEN" | tr -d '[:space:]' | sed 's/^["'\'']*//;s/["'\'']*$//' | sed 's/^Bearer[[:space:]]*//i')
          ZONE_ID=$(echo "$CLOUDFLARE_ZONE_ID" | tr -d '[:space:]' | sed 's/^["'\'']*//;s/["'\'']*$//')
          
          echo "🔍 Token diagnostics:"
          echo "  - Token length: ${#TOKEN}"
          echo "  - First 8 chars: ${TOKEN:0:8}..."
          echo "  - Zone ID length: ${#ZONE_ID}"
          echo ""
          
          echo "1. Verifying API token..."
          TOKEN_VERIFY=$(curl -sS "https://api.cloudflare.com/client/v4/user/tokens/verify" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json")
          echo "$TOKEN_VERIFY" | jq -r '.success'
          
          if [ "$(echo "$TOKEN_VERIFY" | jq -r '.success')" != "true" ]; then
            echo "❌ Token verification failed"
            echo "$TOKEN_VERIFY"
            echo ""
            echo "💡 Common issues:"
            echo "  - Token should be exactly 40 characters (found: ${#TOKEN})"
            echo "  - Token should NOT include 'Bearer' prefix in the secret"
            echo "  - Token should NOT have quotes around it"
            echo "  - Get your token from: https://dash.cloudflare.com/profile/api-tokens"
            exit 1
          fi
          
          echo "✅ Token verification successful"
          echo ""
          
          echo "2. Fetching zone info for domain morningai.me..."
          ZONE_INFO=$(curl -sS "https://api.cloudflare.com/client/v4/zones?name=morningai.me" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json")
          
          ACTUAL_ZONE_ID=$(echo "$ZONE_INFO" | jq -r '.result[0].id')
          echo "  - Zone ID from API: $ACTUAL_ZONE_ID"
          echo "  - Zone ID from secret: $ZONE_ID"
          
          if [ "$ACTUAL_ZONE_ID" != "$ZONE_ID" ]; then
            echo ""
            echo "⚠️  Zone ID mismatch detected!"
            echo "💡 Please update CLOUDFLARE_ZONE_ID secret to: $ACTUAL_ZONE_ID"
            echo "   Using zone from API for this test..."
            ZONE_ID="$ACTUAL_ZONE_ID"
          else
            echo "  ✅ Zone ID matches"
          fi
          echo ""
          
          echo "3. Querying DNS records..."
          DNS_RESULT=$(curl -sS "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?per_page=1" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json")
          
          echo "$DNS_RESULT" | jq '{success, result_count: (.result | length), first_record: .result[0].name}'
          
          if [ "$(echo "$DNS_RESULT" | jq -r '.success')" != "true" ]; then
            echo "❌ DNS query failed"
            echo "$DNS_RESULT"
            exit 1
          fi
          
          echo "✅ Cloudflare API working correctly"
      - name: Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ]; then
            echo "⚠️  Vercel credentials not configured"
            exit 0
          fi
          npx -y vercel@latest projects ls --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" | head -n 1
      - name: Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          if [ -z "$RENDER_API_KEY" ]; then
            echo "⚠️  Render API key not configured"
            exit 0
          fi
          curl -sS https://api.render.com/v1/services -H "Authorization: Bearer $RENDER_API_KEY" | head -n 1
      - name: Sentry
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          if [ -z "$SENTRY_DSN" ]; then
            echo "⚠️  Sentry DSN not configured"
            exit 0
          fi
          echo "✅ Sentry DSN configured: ${SENTRY_DSN:0:30}..."
