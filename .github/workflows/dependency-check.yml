name: Dependency Management Check

on:
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'pnpm-lock.yaml'
      - 'yarn.lock'
      - '.github/workflows/**'
      - 'vercel.json'
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'pnpm-lock.yaml'
      - 'yarn.lock'

jobs:
  check-package-manager:
    name: Verify Package Manager Consistency
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for forbidden lockfiles
        id: check-lockfiles
        run: |
          echo "Checking for forbidden lockfiles..."
          
          FORBIDDEN_FILES=""
          
          # Check for yarn.lock (forbidden)
          if [ -f "yarn.lock" ]; then
            FORBIDDEN_FILES="${FORBIDDEN_FILES}\n- yarn.lock"
          fi
          
          # Check for package-lock.json (forbidden - we use pnpm now)
          if [ -f "package-lock.json" ]; then
            FORBIDDEN_FILES="${FORBIDDEN_FILES}\n- package-lock.json"
          fi
          
          if [ -n "$FORBIDDEN_FILES" ]; then
            echo "forbidden=true" >> $GITHUB_OUTPUT
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo -e "$FORBIDDEN_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "forbidden=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No forbidden lockfiles found"
          fi

      - name: Verify pnpm-lock.yaml exists
        id: check-pnpm-lock
        run: |
          # Only check if package.json exists at root (skip if no root package.json)
          if [ ! -f "package.json" ]; then
            echo "exists=skip" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No root package.json, skipping lockfile check"
            exit 0
          fi
          
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå pnpm-lock.yaml not found!"
            exit 1
          else
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ pnpm-lock.yaml exists"
          fi

      - name: Check vercel.json for correct installCommand
        id: check-vercel
        if: always()
        run: |
          if [ -f "vercel.json" ]; then
            echo "Checking vercel.json configuration..."
            
            # Check if installCommand uses pnpm
            if grep -q '"installCommand"' vercel.json; then
              INSTALL_CMD=$(grep '"installCommand"' vercel.json)
              
              if echo "$INSTALL_CMD" | grep -q "yarn"; then
                echo "vercel_uses_yarn=true" >> $GITHUB_OUTPUT
                echo "‚ùå vercel.json uses yarn in installCommand"
                exit 1
              elif echo "$INSTALL_CMD" | grep -q "npm"; then
                echo "vercel_uses_npm=true" >> $GITHUB_OUTPUT
                echo "‚ùå vercel.json uses npm in installCommand (should use pnpm)"
                exit 1
              elif echo "$INSTALL_CMD" | grep -q "pnpm"; then
                echo "vercel_uses_pnpm=true" >> $GITHUB_OUTPUT
                echo "‚úÖ vercel.json correctly uses pnpm"
              fi
            else
              echo "‚ö†Ô∏è vercel.json does not specify installCommand"
            fi
            
            # Check if rootDirectory is used (forbidden)
            if grep -q '"rootDirectory"' vercel.json; then
              echo "vercel_has_rootdir=true" >> $GITHUB_OUTPUT
              echo "‚ùå vercel.json uses rootDirectory (forbidden)"
              exit 1
            else
              echo "vercel_has_rootdir=false" >> $GITHUB_OUTPUT
              echo "‚úÖ vercel.json does not use rootDirectory"
            fi
          else
            echo "‚ö†Ô∏è vercel.json not found"
          fi

      - name: Check GitHub Actions workflows
        id: check-workflows
        if: always()
        run: |
          echo "Checking GitHub Actions workflows..."
          
          WORKFLOWS_WITH_NPM=""
          WORKFLOWS_WITH_YARN=""
          
          for workflow in .github/workflows/*.yml .github/workflows/*.yaml; do
            # Skip this workflow itself to avoid false positives
            if [ "$(basename $workflow)" == "dependency-check.yml" ]; then
              continue
            fi
            
            if [ -f "$workflow" ]; then
              # Check for actual usage of npm (not just mentions in comments)
              if grep -E "(run:|uses:).*npm install" "$workflow" > /dev/null; then
                WORKFLOWS_WITH_NPM="${WORKFLOWS_WITH_NPM}\n- $(basename $workflow)"
              fi
              # Check for actual usage of yarn (not just mentions in comments)
              if grep -E "(run:|uses:).*yarn" "$workflow" > /dev/null; then
                WORKFLOWS_WITH_YARN="${WORKFLOWS_WITH_YARN}\n- $(basename $workflow)"
              fi
            fi
          done
          
          if [ -n "$WORKFLOWS_WITH_NPM" ]; then
            echo "workflows_npm<<EOF" >> $GITHUB_OUTPUT
            echo -e "$WORKFLOWS_WITH_NPM" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Found workflows using npm (should use pnpm)"
          fi
          
          if [ -n "$WORKFLOWS_WITH_YARN" ]; then
            echo "workflows_yarn<<EOF" >> $GITHUB_OUTPUT
            echo -e "$WORKFLOWS_WITH_YARN" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Found workflows using yarn"
          fi
          
          if [ -z "$WORKFLOWS_WITH_NPM" ] && [ -z "$WORKFLOWS_WITH_YARN" ]; then
            echo "‚úÖ All workflows use pnpm"
          fi

      - name: Comment on PR with results
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## ‚ùå Dependency Management Check Failed\n\n';
            comment += 'This PR violates the dependency management policy. Please review the following issues:\n\n';
            
            // Check forbidden lockfiles
            const forbiddenFiles = process.env.FORBIDDEN_FILES;
            if (forbiddenFiles) {
              comment += '### üö´ Forbidden Lockfiles Detected\n\n';
              comment += 'The following lockfiles should be removed:\n';
              comment += forbiddenFiles + '\n\n';
              comment += '**Action Required:**\n';
              comment += '```bash\n';
              comment += 'rm -f package-lock.json yarn.lock\n';
              comment += 'pnpm install\n';
              comment += 'git add pnpm-lock.yaml\n';
              comment += 'git commit -m "chore: Áµ±‰∏Ä‰ΩøÁî® pnpmÔºåÁßªÈô§Èùû pnpm lockfile"\n';
              comment += '```\n\n';
            }
            
            // Check pnpm-lock.yaml
            const pnpmLockExists = process.env.PNPM_LOCK_EXISTS;
            if (pnpmLockExists === 'false') {
              comment += '### ‚ùå Missing pnpm-lock.yaml\n\n';
              comment += 'pnpm-lock.yaml is required for consistent dependency management.\n\n';
              comment += '**Action Required:**\n';
              comment += '```bash\n';
              comment += 'pnpm install\n';
              comment += 'git add pnpm-lock.yaml\n';
              comment += 'git commit -m "chore: Êñ∞Â¢û pnpm-lock.yaml"\n';
              comment += '```\n\n';
            }
            
            // Check vercel.json
            const vercelUsesNpm = process.env.VERCEL_USES_NPM;
            const vercelUsesYarn = process.env.VERCEL_USES_YARN;
            if (vercelUsesNpm === 'true' || vercelUsesYarn === 'true') {
              comment += '### ‚ö†Ô∏è Vercel Configuration Issue\n\n';
              comment += 'vercel.json should use pnpm for installCommand.\n\n';
              comment += '**Correct Configuration:**\n';
              comment += '```json\n';
              comment += '{\n';
              comment += '  "installCommand": "pnpm install"\n';
              comment += '}\n';
              comment += '```\n\n';
            }
            
            comment += '---\n\n';
            comment += 'üìö **Documentation:**\n';
            comment += '- [Dependency Management Guidelines](../blob/main/docs/DEPENDENCY_MANAGEMENT.md)\n';
            comment += '- [Vercel Deployment Guide](../blob/main/docs/VERCEL_DEPLOYMENT_GUIDE.md)\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        env:
          FORBIDDEN_FILES: ${{ steps.check-lockfiles.outputs.files }}
          PNPM_LOCK_EXISTS: ${{ steps.check-pnpm-lock.outputs.exists }}
          VERCEL_USES_NPM: ${{ steps.check-vercel.outputs.vercel_uses_npm }}
          VERCEL_USES_YARN: ${{ steps.check-vercel.outputs.vercel_uses_yarn }}

      - name: Summary
        if: always()
        run: |
          echo "## Dependency Management Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-lockfiles.outputs.forbidden }}" == "true" ]; then
            echo "‚ùå Forbidden lockfiles found" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No forbidden lockfiles" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.check-pnpm-lock.outputs.exists }}" == "true" ]; then
            echo "‚úÖ pnpm-lock.yaml exists" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check-pnpm-lock.outputs.exists }}" == "skip" ]; then
            echo "‚è≠Ô∏è No root package.json (skipped)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå pnpm-lock.yaml missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.check-vercel.outputs.vercel_uses_pnpm }}" == "true" ]; then
            echo "‚úÖ vercel.json uses pnpm" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.check-vercel.outputs.vercel_has_rootdir }}" == "true" ]; then
            echo "‚ö†Ô∏è vercel.json uses rootDirectory (not recommended)" >> $GITHUB_STEP_SUMMARY
          fi
