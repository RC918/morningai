name: Ops Agent Sandbox E2E
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'handoff/20250928/40_App/orchestrator/sandbox/**'
      - 'handoff/20250928/40_App/orchestrator/mcp/**'
      - '.github/workflows/ops-agent-sandbox-e2e.yml'
  pull_request:
    branches: [main]
    # No paths filter - all PRs trigger this workflow
    # Decision to run heavy E2E or fast-pass is made in the job

# Prevent concurrent E2E runs for the same PR
concurrency:
  group: e2e-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if sandbox files exist and changed
        id: changed
        run: |
          # Check for label-based overrides
          LABELS='${{ toJSON(github.event.pull_request.labels.*.name) }}'
          
          # Force run if 'run-e2e' label is present
          if echo "$LABELS" | grep -q '"run-e2e"'; then
            echo "run_tests=true" >> $GITHUB_OUTPUT
            echo "üè∑Ô∏è  Label 'run-e2e' detected - forcing full E2E tests"
            exit 0
          fi
          
          # Force skip if 'skip-e2e' label is present (emergency bypass)
          if echo "$LABELS" | grep -q '"skip-e2e"'; then
            echo "run_tests=false" >> $GITHUB_OUTPUT
            echo "üè∑Ô∏è  Label 'skip-e2e' detected - bypassing E2E tests (emergency mode)"
            exit 0
          fi
          
          # Check if required sandbox files exist
          if [ ! -f "handoff/20250928/40_App/orchestrator/sandbox/ops_agent/mcp_client.py" ] || \
             [ ! -f "handoff/20250928/40_App/orchestrator/sandbox/ops_agent/ops_agent_sandbox.py" ] || \
             [ ! -f "handoff/20250928/40_App/orchestrator/mcp/server.py" ]; then
            echo "run_tests=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Required sandbox files not found - skipping E2E tests (Phase 11 files may have been removed)"
            exit 0
          fi
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^(handoff/20250928/40_App/orchestrator/(sandbox|mcp)/|\.github/workflows/ops-agent-sandbox-e2e\.yml)' || true)
            if [ -n "$CHANGED" ]; then
              echo "run_tests=true" >> $GITHUB_OUTPUT
              echo "üì¶ Sandbox/MCP files changed, will run full E2E tests"
            else
              echo "run_tests=false" >> $GITHUB_OUTPUT
              echo "‚úÖ No sandbox/MCP changes detected - fast-pass mode (noop)"
            fi
          else
            echo "run_tests=true" >> $GITHUB_OUTPUT
            echo "üöÄ Push to main or manual trigger, will run full E2E tests"
          fi
      
      - name: Setup Python
        if: steps.changed.outputs.run_tests == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.x'
      
      - name: Install flyctl
        if: steps.changed.outputs.run_tests == 'true'
        uses: superfly/flyctl-actions/setup-flyctl@v1
      
      - name: Install dependencies
        if: steps.changed.outputs.run_tests == 'true'
        run: |
          cd handoff/20250928/40_App/orchestrator
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install -e .
      
      - name: Install Playwright browsers
        if: steps.changed.outputs.run_tests == 'true'
        run: |
          npx playwright install --with-deps chromium
      
      - name: Deploy ephemeral sandbox to Fly.io
        if: steps.changed.outputs.run_tests == 'true'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          export APP_NAME="morningai-sandbox-e2e-${{ github.run_id }}"
          echo "Deploying ephemeral sandbox: $APP_NAME"
          
          cd handoff/20250928/40_App/orchestrator/sandbox/ops_agent
          
          echo "Copying mcp module into build context..."
          cp -r ../../mcp .
          
          flyctl apps create $APP_NAME --org personal || true
          
          # Retry deployment up to 3 times (Fly.io can be flaky)
          for i in {1..3}; do
            echo "Deployment attempt $i/3..."
            if flyctl deploy \
              --app $APP_NAME \
              --primary-region sin \
              --vm-size shared-cpu-1x \
              --vm-memory 256 \
              --wait-timeout 300; then
              echo "‚úÖ Deployment successful on attempt $i"
              break
            else
              if [ $i -lt 3 ]; then
                echo "‚ö†Ô∏è  Deployment failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "‚ùå Deployment failed after 3 attempts"
                exit 1
              fi
            fi
          done
          
          echo "SANDBOX_APP_NAME=$APP_NAME" >> $GITHUB_ENV
          
          # Retry getting sandbox URL (can fail if app is still starting)
          for i in {1..5}; do
            SANDBOX_URL=$(flyctl status --app $APP_NAME --json 2>/dev/null | jq -r '.Hostname' 2>/dev/null || echo "")
            if [ -n "$SANDBOX_URL" ] && [ "$SANDBOX_URL" != "null" ]; then
              echo "SANDBOX_URL=https://$SANDBOX_URL" >> $GITHUB_ENV
              echo "‚úÖ Sandbox deployed at: https://$SANDBOX_URL"
              break
            else
              if [ $i -lt 5 ]; then
                echo "‚ö†Ô∏è  Waiting for sandbox URL (attempt $i/5)..."
                sleep 5
              else
                echo "‚ùå Failed to get sandbox URL after 5 attempts"
                exit 1
              fi
            fi
          done
      
      - name: Verify sandbox deployment
        if: steps.changed.outputs.run_tests == 'true'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Verifying sandbox deployment status..."
          flyctl status --app ${{ env.SANDBOX_APP_NAME }}
          
          echo "Checking sandbox health..."
          flyctl checks list --app ${{ env.SANDBOX_APP_NAME }}
          
          echo "Viewing recent logs..."
          flyctl logs --app ${{ env.SANDBOX_APP_NAME }} -n
      
      - name: Start MCP Server
        if: steps.changed.outputs.run_tests == 'true'
        run: |
          cd handoff/20250928/40_App/orchestrator
          python mcp/server.py > /tmp/mcp-server.log 2>&1 &
          sleep 5
          echo "MCP Server started, checking logs..."
          cat /tmp/mcp-server.log || true
      
      - name: Run E2E test
        if: steps.changed.outputs.run_tests == 'true'
        env:
          SANDBOX_ENABLED: 'true'
          SANDBOX_URL: ${{ env.SANDBOX_URL }}
          REDIS_URL: redis://localhost:6379
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: RC918/morningai
        run: |
          cd handoff/20250928/40_App/orchestrator
          python -m pytest tests/test_ops_agent_sandbox.py -v --tb=long --log-cli-level=INFO 2>&1 | tee /tmp/pytest-output.log
      
      - name: Fast-pass (no sandbox changes)
        if: steps.changed.outputs.run_tests == 'false'
        run: |
          echo "‚úÖ Fast-pass mode: No sandbox/MCP changes detected"
          echo "This check passes automatically (noop) for PRs that don't modify:"
          echo "  - handoff/20250928/40_App/orchestrator/sandbox/**"
          echo "  - handoff/20250928/40_App/orchestrator/mcp/**"
          echo "  - .github/workflows/ops-agent-sandbox-e2e.yml"
          echo ""
          echo "üí° To force E2E tests, add the 'run-e2e' label to this PR"
          echo "‚ö†Ô∏è  To bypass E2E (emergency), add the 'skip-e2e' label"
      
      - name: Cleanup ephemeral sandbox
        if: always() && steps.changed.outputs.run_tests == 'true'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if [ -n "${{ env.SANDBOX_APP_NAME }}" ]; then
            echo "Destroying ephemeral sandbox: ${{ env.SANDBOX_APP_NAME }}"
            flyctl apps destroy ${{ env.SANDBOX_APP_NAME }} --yes || true
          fi
      
      - name: Upload test logs
        if: always() && steps.changed.outputs.run_tests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs
          path: |
            /tmp/pytest-output.log
            /tmp/mcp-server.log
          retention-days: 7
