#!/usr/bin/env node

/**
 * Extract Supabase localStorage from Playwright auth state and create injection script
 * 
 * This script:
 * 1. Reads Playwright's storageState.json (contains localStorage from authenticated session)
 * 2. Extracts Supabase auth data from localStorage
 * 3. Creates a JavaScript snippet that Lighthouse can execute before testing
 * 
 * This allows Lighthouse to test authenticated pages by injecting the Supabase
 * session into localStorage before the page loads.
 */

const fs = require('fs');
const path = require('path');

const PLAYWRIGHT_STATE_FILE = path.join(__dirname, '../frontend-dashboard-deploy/playwright/.auth/storageState.json');
const OUTPUT_FILE = path.join(__dirname, '../frontend-dashboard-deploy/lhci-auth-inject.js');

function extractLocalStorage() {
  try {
    if (!fs.existsSync(PLAYWRIGHT_STATE_FILE)) {
      console.error(`❌ Playwright state file not found: ${PLAYWRIGHT_STATE_FILE}`);
      console.error('   Make sure to run Playwright auth setup first:');
      console.error('   pnpm exec playwright test tests/auth.setup.spec.ts');
      process.exit(1);
    }

    const state = JSON.parse(fs.readFileSync(PLAYWRIGHT_STATE_FILE, 'utf8'));
    
    if (!state.origins || state.origins.length === 0) {
      console.error('❌ No localStorage data found in Playwright state');
      console.error('   The authentication may not have saved properly.');
      process.exit(1);
    }

    let supabaseData = null;
    for (const origin of state.origins) {
      if (origin.localStorage) {
        for (const item of origin.localStorage) {
          if (item.name.includes('supabase.auth.token')) {
            supabaseData = origin.localStorage;
            console.log(`✅ Found Supabase auth data in origin: ${origin.origin}`);
            break;
          }
        }
      }
      if (supabaseData) break;
    }

    if (!supabaseData) {
      console.error('❌ No Supabase auth data found in localStorage');
      console.error('   Available localStorage keys:', 
        state.origins.flatMap(o => o.localStorage?.map(i => i.name) || []).join(', '));
      process.exit(1);
    }

    console.log(`✅ Extracted ${supabaseData.length} localStorage item(s)`);
    console.log('   Keys:', supabaseData.map(i => i.name).join(', '));

    return supabaseData;
  } catch (error) {
    console.error('❌ Error reading Playwright state:', error.message);
    process.exit(1);
  }
}

function createInjectionScript(localStorageData) {
  try {
    const scriptLines = localStorageData.map(item => {
      const escapedValue = JSON.stringify(item.value);
      return `localStorage.setItem(${JSON.stringify(item.name)}, ${escapedValue});`;
    });

    const script = `// Auto-generated by make-lhci-cookie.js

(function() {
  ${scriptLines.join('\n  ')}
  console.log('✅ Supabase auth injected into localStorage');
})();
`;

    fs.writeFileSync(OUTPUT_FILE, script, 'utf8');
    console.log(`✅ Injection script written to: ${OUTPUT_FILE}`);
  } catch (error) {
    console.error('❌ Error writing injection script:', error.message);
    process.exit(1);
  }
}

function main() {
  console.log('Converting Playwright localStorage to LHCI injection script...\n');
  
  const localStorageData = extractLocalStorage();
  createInjectionScript(localStorageData);
  
  console.log('\n✅ Conversion complete!');
  console.log('   Lighthouse CI can now test authenticated pages.');
  console.log('   The script will be injected before each page load.');
}

main();
